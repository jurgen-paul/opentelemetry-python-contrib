name: Release individual component
on:
  workflow_dispatch:
    inputs:
      component:
        type: choice
        options:
        - opentelemetry-instrumentation-openai
        description: 'Release component'
        required: true
      version: # TODO automate
        type: string
        description: 'Release version'
        required: true
jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - run: |
          if [[ $GITHUB_REF_NAME != component-release/* ]]; then
            echo this workflow should only be run against component-release branches
            exit 1
          fi

      - uses: actions/checkout@v4

      - name: Set environment variables
        run: |
          echo "VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "COMPONENT_PATH=./instrumentation/${{ inputs.component }}" >> $GITHUB_ENV
          echo "PACKAGE_NAME=${{ inputs.component }}" >> $GITHUB_ENV
          echo "PACKAGE_VERSION=${{ inputs.version }}" >> $GITHUB_ENV
          echo "RELEASE_TAG=${{ inputs.component }}==${{ inputs.version }}" >> $GITHUB_ENV
          echo "PATCH_RELEASE=TODO_PATCH_RELEASE" >> $GITHUB_ENV
          echo "PRIOR_VERSION=TODO_PRIOR_VERSION" >> $GITHUB_ENV
      - run: |
          if ! grep --quiet "^## Version ${PACKAGE_VERSION} " ${COMPONENT_PATH}/CHANGELOG.md; then
            echo the pull request generated by prepare-release-branch.yml needs to be merged first
            exit 1
          fi

      # check out main branch to verify there won't be problems with merging the change log
      # at the end of this workflow
      - uses: actions/checkout@v4
        with:
          ref: main

        # back to the release branch
      - uses: actions/checkout@v4

        # next few steps publish to pypi
      - uses: actions/setup-python@v5
        with:
          python-version: '3.8'

      - name: Build wheels
        run: ./scripts/build.sh

      - name: Install twine
        run: |
          pip install twine

      # The step below publishes to testpypi in order to catch any issues
      # with the package configuration that would cause a failure to upload
      # to pypi. One example of such a failure is if a classifier is
      # rejected by pypi (e.g "3 - Beta"). This would cause a failure during the
      # middle of the package upload causing the action to fail, and certain packages
      # might have already been updated, this would be bad.
      # EDIT: 5/31/2024 - TestPypi now requires a verified email. Commenting out as a temporary measure
      # until we found TestPypi credentials.
      # - name: Publish to TestPyPI
      #   env:
      #     TWINE_USERNAME: '__token__'
      #     TWINE_PASSWORD: ${{ secrets.test_pypi_token }}
      #   run: |
      #     twine upload --repository testpypi --skip-existing --verbose dist/*

      - name: Publish to PyPI
        env:
          TWINE_USERNAME: '__token__'
          TWINE_PASSWORD: ${{ secrets.pypi_password }}
        run: |
          twine upload --skip-existing --verbose dist/*
        continue-on-error: true

      - name: Generate release notes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # conditional block not indented because of the heredoc
          if [[ ! -z $PATCH_RELEASE ]]; then
          cat > /tmp/release-notes.txt << EOF
          This is a patch release on the previous $PRIOR_VERSION release, fixing the issue(s) below.

          EOF
          fi

          # CHANGELOG_SECTION.md is also used at the end of the release workflow
          # for copying the change log updates to main
          sed -n "0,/^## Version ${RELEASE_TAG} /d;/^## Version /q;p" ${COMPONENT_PATH}/CHANGELOG.md \
            > /tmp/CHANGELOG_SECTION.md

          # the complex perl regex is needed because markdown docs render newlines as soft wraps
          # while release notes render them as line breaks
          perl -0pe 's/(?<!\n)\n *(?!\n)(?![-*] )(?![1-9]+\. )/ /g' /tmp/CHANGELOG_SECTION.md \
            >> /tmp/release-notes.txt

      - name: Create GitHub release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create --target $GITHUB_REF_NAME \
                            --title "Release ${PACKAGE_NAME} ${PACKAGE_VERSION}" \
                            --notes-file /tmp/release-notes.txt \
                            --discussion-category announcements \
                            $RELEASE_TAG

      - uses: actions/checkout@v4
        with:
          # the step below is creating a pull request against main
          ref: main

      - name: Copy change log updates to main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if [[ -z $PATCH_RELEASE ]]; then
            # this was not a patch release, so the version exists already in the CHANGELOG.md

            # update the release date
            date=$(gh release view $RELEASE_TAG --json publishedAt --jq .publishedAt | sed 's/T.*//')
            sed -Ei "s/## Version ${PACKAGE_VERSION} .*/## Version ${PACKAGE_VERSION} ($date)/" ${COMPONENT_PATH}/CHANGELOG.md

            # the entries are copied over from the release branch to support workflows
            # where change log entries may be updated after preparing the release branch

            # copy the portion above the release, up to and including the heading
            sed -n "0,/^## Version ${PACKAGE_VERSION} ($date)/p"  ${COMPONENT_PATH}/CHANGELOG.md > /tmp/CHANGELOG.md

            # copy the release notes
            cat /tmp/CHANGELOG_SECTION.md >> /tmp/CHANGELOG.md

            # copy the portion below the release
            sed -n "0,/^## Version ${PACKAGE_VERSION} /d;0,/^## Version /{/^## Version/!d};p" ${COMPONENT_PATH}/CHANGELOG.md \
              >> /tmp/CHANGELOG.md

            # update the real CHANGELOG.md
            cp /tmp/CHANGELOG.md ${COMPONENT_PATH}/CHANGELOG.md
          else
            # this was a patch release, so the version does not exist already in the CHANGELOG.md

            # copy the portion above the top-most release, not including the heading
            sed -n "0,/^## Version /{ /^## Version /!p }" ${COMPONENT_PATH}/CHANGELOG.md > /tmp/CHANGELOG.md

            # add the heading
            date=$(gh release view $RELEASE_TAG --json publishedAt --jq .publishedAt | sed 's/T.*//')
            echo "## Version ${PACKAGE_VERSION} ($date)" >> /tmp/CHANGELOG.md

            # copy the release notes
            cat /tmp/CHANGELOG_SECTION.md >> /tmp/CHANGELOG.md

            # copy the portion starting from the top-most release
            sed -n "/^## Version /,\$p" ${COMPONENT_PATH}/CHANGELOG.md >> /tmp/CHANGELOG.md

            # update the real CHANGELOG.md
            cp /tmp/CHANGELOG.md ${COMPONENT_PATH}/CHANGELOG.md
          fi

      - name: Use CLA approved github bot
        run: .github/scripts/use-cla-approved-github-bot.sh

      - name: Create pull request against main
        env:
          # not using secrets.GITHUB_TOKEN since pull requests from that token do not run workflows
          GITHUB_TOKEN: ${{ secrets.OPENTELEMETRYBOT_GITHUB_TOKEN }}
        run: |
          message="Copy change log updates from $GITHUB_REF_NAME"
          body="Copy log updates from \`$GITHUB_REF_NAME\`."
          branch="opentelemetrybot/copy-change-log-updates-from-${GITHUB_REF_NAME//\//-}"

          if [[ -z $PATCH_RELEASE ]]; then
            if git diff --quiet; then
              echo there are no updates needed to the change log on main, not creating pull request
              exit 0 # success
            fi
          fi

          git commit -a -m "$message"
          git push origin HEAD:$branch
          gh pr create --title "$message" \
                       --body "$body" \
                       --head $branch \
                       --base main
